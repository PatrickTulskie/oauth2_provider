#!/usr/bin/env ruby
require File.expand_path('../../config/boot',  __FILE__)

require 'active_support'
require 'action_controller'

require 'fileutils'
require 'optparse'

# TODO: Push Thin adapter upstream so we don't need worry about requiring it
begin
  require_library_or_gem 'thin'
rescue Exception
  # Thin not available
end

require 'webrick'
require 'webrick/https'
require 'openssl'

# see http://www.zunisoft.com/?p=740 for generating key and cert

private_key_content = %Q{-----BEGIN RSA PRIVATE KEY-----
MIICXQIBAAKBgQDhJDcGEIQ+dcOKl5cu8LIHx2lgy1VGsNAUTur0+dQPNJflOn5l
OHbADPTctt4Gn+Jv+TKIWTr2RUQHfhm8w7KX3omOxNkhTP88Re5MkI/+R8YxMoFb
GbptLD/GyPojwIBVwY9h+Xkr6g9OVKjIspE8ZzjtEQ1omwSUJJyUW+1DJQIDAQAB
AoGAcvXDAt28KQiI6GOvVtCgl0hDjqFE0evG1BfX8W7/0SPRy8Kqd5T1TetPvMPD
ay6IuRRNsUGe0dFcg1boXXKv5dbZdIGnOmJzwmOvOVcOyL9iahzsWfRnUebzq35Y
UX0PYva5WxGzTOoFFpJoOxqYbvEg/e+UvM2vVBIaLgw4daECQQD694P+sw7q2tbu
33QnPO5O6lroNyRhZzY1/viytlxtufutBSIJ7lN1VeI1JtC9u972vQ/lnMdPfJfZ
PoHhmhxDAkEA5agcEeLIMiztRQ2Fj0R/jcurNdxeP9+e5JW7Z9C5RHKB75p0PQi+
pmdJjIOj2IguDv4a2uFTvGnsP8C5v/tgdwJBANwrv1H4lrK1UHB5+vXdf5geA6jL
j5AgMzAFwvtN/yKIUmKFKUqbGf7LXMuShPifVEkUrlibRUPXo4QEUX+xau8CQA+p
9bAqnaj+c3iAQZnR/Dk5qQXVcAA/SmEg7VVZYSmP/djP2hnHnOlQpi2VVPmR4EJZ
ho9jSwjQ2LJIfOLhTGUCQQCzMQP+p7W90zFQlO3pbw+YPjGz2dH9UsPJxQj4vCYI
G1h+J59SbKOvq6gqCcyYhQsUZaqiyQyk0Xq2suZZOhem
-----END RSA PRIVATE KEY-----}

cert_content = %Q{-----BEGIN CERTIFICATE-----
MIICATCCAWoCCQDys0fYa4dCUzANBgkqhkiG9w0BAQUFADBFMQswCQYDVQQGEwJB
VTETMBEGA1UECBMKU29tZS1TdGF0ZTEhMB8GA1UEChMYSW50ZXJuZXQgV2lkZ2l0
cyBQdHkgTHRkMB4XDTEwMDcwOTAwMjQwOFoXDTExMDcwOTAwMjQwOFowRTELMAkG
A1UEBhMCQVUxEzARBgNVBAgTClNvbWUtU3RhdGUxITAfBgNVBAoTGEludGVybmV0
IFdpZGdpdHMgUHR5IEx0ZDCBnzANBgkqhkiG9w0BAQEFAAOBjQAwgYkCgYEA4SQ3
BhCEPnXDipeXLvCyB8dpYMtVRrDQFE7q9PnUDzSX5Tp+ZTh2wAz03LbeBp/ib/ky
iFk69kVEB34ZvMOyl96JjsTZIUz/PEXuTJCP/kfGMTKBWxm6bSw/xsj6I8CAVcGP
Yfl5K+oPTlSoyLKRPGc47RENaJsElCSclFvtQyUCAwEAATANBgkqhkiG9w0BAQUF
AAOBgQBtbGt9uv4jyG4GABR8+APH/3YncBQZhxGAoWT2OfkC9FX/U6r3hd0071Hb
0MPzhgxWuu1Km4W4IH9fSkGjjsAH229dGza7sl/h42DbRSHW09xxUrRNphhzM14m
vxT2kvWDOJ/bqoTUrQqfVNWJWcf09v+HKM6p08jj7B48uTk4/g==
-----END CERTIFICATE-----}

options = {
  :Port        => 5000,
  :Host        => "0.0.0.0",
  :environment => (ENV['RAILS_ENV'] || "development").dup,
  :config      => RAILS_ROOT + "/config.ru",
  :detach      => false,
  :debugger    => false,
  :path        => nil,
  :SSLEnable        => true,
  :SSLVerifyClient  => OpenSSL::SSL::VERIFY_NONE,
  :SSLCertificate   => OpenSSL::X509::Certificate.new(cert_content),
  :SSLPrivateKey    => OpenSSL::PKey::RSA.new(private_key_content)
}

ARGV.clone.options do |opts|
  opts.on("-p", "--port=port", Integer,
          "Runs Rails on the specified port.", "Default: 3000") { |v| options[:Port] = v }
  opts.on("-b", "--binding=ip", String,
          "Binds Rails to the specified ip.", "Default: 0.0.0.0") { |v| options[:Host] = v }
  opts.on("-c", "--config=file", String,
          "Use custom rackup configuration file") { |v| options[:config] = v }
  opts.on("-d", "--daemon", "Make server run as a Daemon.") { options[:detach] = true }
  opts.on("-u", "--debugger", "Enable ruby-debugging for the server.") { options[:debugger] = true }
  opts.on("-e", "--environment=name", String,
          "Specifies the environment to run this server under (test/development/production).",
          "Default: development") { |v| options[:environment] = v }
  opts.on("-P", "--path=/path", String, "Runs Rails app mounted at a specific path.", "Default: /") { |v| options[:path] = v }

  opts.separator ""

  opts.on("-h", "--help", "Show this help message.") { puts opts; exit }

  opts.parse!
end

server = Rack::Handler::WEBrick

puts "=> Booting #{ActiveSupport::Inflector.demodulize(server)}"
puts "=> Rails #{Rails.version} application starting on https://#{options[:Host]}:#{options[:Port]}#{options[:path]}"

%w(cache pids sessions sockets).each do |dir_to_make|
  FileUtils.mkdir_p(File.join(RAILS_ROOT, 'tmp', dir_to_make))
end

if options[:detach]
  Process.daemon
  pid = "#{RAILS_ROOT}/tmp/pids/server.pid"
  File.open(pid, 'w'){ |f| f.write(Process.pid) }
  at_exit { File.delete(pid) if File.exist?(pid) }
end

ENV["RAILS_ENV"] = options[:environment]
RAILS_ENV.replace(options[:environment]) if defined?(RAILS_ENV)

if File.exist?(options[:config])
  config = options[:config]
  if config =~ /\.ru$/
    cfgfile = File.read(config)
    if cfgfile[/^#\\(.*)/]
      opts.parse!($1.split(/\s+/))
    end
    inner_app = eval("Rack::Builder.new {( " + cfgfile + "\n )}.to_app", nil, config)
  else
    require config
    inner_app = Object.const_get(File.basename(config, '.rb').capitalize)
  end
else
  require RAILS_ROOT + "/config/environment"
  inner_app = ActionController::Dispatcher.new
end

if options[:path].nil?
  map_path = "/"
else
  ActionController::Base.relative_url_root = options[:path]
  map_path = options[:path]
end

app = Rack::Builder.new {
  use Rails::Rack::LogTailer unless options[:detach]
  use Rails::Rack::Debugger if options[:debugger]
  map map_path do
    use Rails::Rack::Static 
    run inner_app
  end
}.to_app

puts "=> Call with -d to detach"

trap(:INT) { exit }

puts "=> Ctrl-C to shutdown server"

begin
  server.run(app, options.merge(:AccessLog => []))
ensure
  puts 'Exiting'
end

