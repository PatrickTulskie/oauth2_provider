h1. Introduction

This plugin implements v09 of the OAuth2 draft spec "http://tools.ietf.org/html/draft-ietf-oauth-v2-09":http://tools.ietf.org/html/draft-ietf-oauth-v2-09.
The latest version of the spec is available at "http://tools.ietf.org/html/draft-ietf-oauth-v2":http://tools.ietf.org/html/draft-ietf-oauth-v2

Currently only the web-server profile "http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1":http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1 is supported.

h1. What's Included

* The OAuth 2.0 (v9) plugin (RAILS_ROOT/vendor/plugins/oauth2_provider) 
* Units and functional tests (RAILS_ROOT/test)
* A sample host Rails application (RAILS_ROOT)
** Create sample app user at /users/new
** Create sample app OAuth client at /oauth/clients
** Access OAuth-allowed protected resource /protected_resource
** List and revoke a user's tokens at /oauth/user_tokens

h1. Supported Features

* Web server flow as described at "http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1":http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1
* Endpoint for clients to request authorization 'code'
* Endpoint to request an access token using the authorization 'code'
* Admin screens for:
 * End users to manage/revoke access tokens given out to 3rd party OAuth2 clients
 * Admins to manage OAuth2 clients

h1. Available Endpoint URLs

See config/routes.rb in the plugin for more details.

*API only URLs*
* /oauth/authorize (Oauth2::Provider::OauthAuthorizeController) - used by the user-agent (browser) to request an authorization 'code'
* /oauth/token (Oauth2::Provider::OauthTokenController) - used by the OAuth2 client to request access token to access protected resources

*Accessed from the browser*
* /oauth/user_tokens (Oauth2::Provider::OauthUserTokensController) - used by end users to view and revoke access to 3rd party OAuth2 clients.
* /oauth/clients (Oauth2::Provider::OauthClientsController) - to manage oauth clients (should be available only to admins)

It is the responsibility of the host application to avoid routing conflicts. The simplest thing to do is avoid defining any paths starting with /oauth

h1. Installation

Copy the plugin into your rails application's vendor/plugins directory.

h2. Configuration

h3. Database

This plugin stores OAuth2 client, authorization codes, and access token into a DB table. It is therefore required that a host app create the necessary ActiveRecord migrations in their application. See the RAILS_ROOT/db/migrate directory for the list of migrations that must be applied for this plugin to work.

h3. Host Application

Change your host application's ApplicationController, to enable OAuth to certain actions.
 
<notextile><pre>
class ApplicationController < ActionController::Base

  # some filter that your application already uses
  # this might check if the user has proper authorization to access a url
  before_filter :login_required

  # include Oauth2::Provider::ApplicationControllerMethods
  include Oauth2::Provider::ApplicationControllerMethods

  # required by the OAuth plugin to figure out the currently logged in user
  # must be a string representation of the user.
  # A 'username', 'email' or a db primary key are good candidates.
  protected def current_user_id
    super
  end

  # define another aliased method that authorizes a user based on the oauth token,
  # and falls back to using the host application's authorization.
  # OAuth2::Provider::ApplicationController methods supplies a user_id_for_oauth_access_token
  # to lookup the user_id for a given access token. The host app must then use that
  # user_id to setup the user session, do any authorization checks, etc.  in this
  # example (from the included sample host app) we simply store the user_id in 
  # the user's session, your scenario will likely differ.
  def login_required_with_oauth
    if user_id = self.user_id_for_oauth_access_token
      session[YOUR_APPLICATION_SESSION_KEY] = user_id
    elsif looks_like_oauth_request?
      render :text => "Denied!", :status => :unauthorized
    else
      login_required_without_oauth
    end
  end
  alias_method_chain :login_required, :oauth

end
</pre></notextile>

To enable OAuth2 access to a particular action:

<notextile><pre>
class ProtectedResourceController < ApplicationController

  # Supported options are:
  #  :only => [:oauth_protected_action...]
  #  :except => [:oauth_unprotected_action...]
  # If no options are specified, defaults to oauth for all actions
  oauth_allowed :only => :index

  def index
    render :text => "current user is #{current_user.email}"
  end

  def no_oauth_here
    render :text => "this content not available via Oauth"
  end

end
</pre></notextile>

h1. Verify plugin working correctly in your application

* OAuth enable the actions for which you wish to allow OAuth as an authentication means
* Setup a new OAuth client at /oauth/clients
* Open /oauth/authorize?redirect_uri=REDIRECT_URI&client_id=CLIENT_ID in a browser. You should see a form asking you to authorize the client to access the host application on your behalf. Check the tickbox and submit.
* Your browser is redirected to your redirect URI (hint: use example.com for this test) and you should now see your authorization code
* For this step you'll need to use curl as you need to perform a POST and there is no form provided by the plugin. Use curl to POST to /oauth/token, passing the following key/value pairs as form data: code=AUTHORIZATION_CODE&grant_type=authorization-code&client_id=CLIENT_ID&client_secret=CLIENT_SECRET&redirect_uri=REDIRECT_URI
* The response to the above POST will be JSON containing your access token, and its expiration time in seconds.

<pre>{:access_token => ACCESS_TOKEN, :expires_in => ACCESS_TOKEN_EXPIRES_IN, :refresh_token => REFRESH_TOKEN}</pre>
  
* You can now use the ACCESS_TOKEN to access the protected resource. This would require the 'Authorization' HTTP header (NOTE that the quotes are required around the ACCESS_TOKEN)
  
<pre>Authorization: Token token="ACCESS_TOKEN"</pre>

* You should expect to see the contents of the protected resource now.