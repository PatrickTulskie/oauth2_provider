h1. Introduction

This plugin implements v09 of the OAuth2 draft spec "http://tools.ietf.org/html/draft-ietf-oauth-v2-09":http://tools.ietf.org/html/draft-ietf-oauth-v2-09.
The latest version of the spec is available at "http://tools.ietf.org/html/draft-ietf-oauth-v2":http://tools.ietf.org/html/draft-ietf-oauth-v2

Currently only the web-server profile "http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1":http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1 is supported.

h1. Supported Features

* Web server flow as described at "http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1":http://tools.ietf.org/html/draft-ietf-oauth-v2-09#section-1.4.1
* Endpoint for clients to request authorization 'code'
* Endpoint to request an access token using the authorization 'code'
* Admin screens for:
 * End users to manage/revoke access tokens given out to 3rd party OAuth2 clients
 * Admins to manage OAuth2 clients

h1. Available Endpoint URLs

See routes.rb in the plugin for more details.

*API only URLs*
* /oauth/authorize (Oauth2::Provider::OauthAuthorizeController) - used by the user-agent (browser) to request an authorization 'code'
* /oauth/token (Oauth2::Provider::OauthTokenController) - used by the OAuth2 client to request access token to access protected resources

*Accessed from the browser*
* /oauth/user_tokens (Oauth2::Provider::OauthUserTokensController) - used by end users to view and revoke access to 3rd party OAuth2 clients.
* /oauth/clients (Oauth2::Provider::OauthClientsController) - to manage oauth clients (should be available only to admins)


h1. Installation

Copy the plugin into your rails application's vendor/plugins directory.

h2. Configuration

h3. Database

This plugin stores OAuth2 client, authorization codes, and access token into a DB table. It is therefore required that a host app create the necessary ActiveRecord migrations in their application. See the RAILS_ROOT/db/migrate directory for the list of migrations that must be applied for this plugin to work.

h3. Host Application

Change your host application's ApplicationController, to enable OAuth to certain actions.
 
<notextile><pre>
class ApplicationController < ActionController::Base

  # some filter that your application already uses
  # this might check if the user has proper authorization to access a url
  before_filter :login_required

  # include Oauth2::Provider::ApplicationControllerMethods
  include Oauth2::Provider::ApplicationControllerMethods

  # required by the OAuth plugin to figure out the currently logged in user
  # must be a string representation of the user.
  # A 'username', 'email' or a db primary key are good candidates.
  protected def current_user_id
    super
  end

  # define another aliased method that authorizes a user based on the oauth token,
  # and falls back to using the host application's authorization.
  # Change 'YOUR_APPLICATION_SESSION_KEY' to whatever key the host application uses.
  def login_required_with_oauth
    if user_id = self.user_id_for_oauth_access_token
      session[YOUR_APPLICATION_SESSION_KEY] = user_id
    elsif looks_like_oauth_request?
      render :text => "Denied!", :status => :unauthorized
    else
      login_required_without_oauth
    end
  end
  alias_method_chain :login_required, :oauth

end
</pre></notextile>

To enable OAuth2 access to a particular action:

<notextile><pre>
class ProtectedResourceController < ApplicationController

  # Supported options are:
  #  :only => [:oauth_protected_action...]
  #  :except => [:oauth_unprotected_action...]
  # If no options are specified, defaults to oauth for all actions
  oauth_allowed :only => :index

  def index
    render :text => "current user is #{current_user.email}"
  end

  def no_oauth_here
    render :text => "this content not available via Oauth"
  end

end
</pre></notextile>
